// generic includes
#include "systemc-ams.h"
#include "battery.h"
#include "converter.h"
#include "cti.h"
#include "converter_pv.h"
#include "pv_panel.h"
#include "mcu.h"
#include "converter_mcu.h"
#include "rf.h"
#include "converter_rf.h"

{% for sensorID in activeSensors %}
// sensor {{ sensorID }}
#include "sensor{{sensorID}}.h"
#include "converter{{sensorID}}.h"
{% endfor %}

int sc_main(int argc, char* argv[])
{

    // instantiate signals
    sca_tdf::sca_signal<double> Ibatt, Vbatt, SOC;
    {% for sensorID in activeSensors %}sca_tdf::sca_signal<double> Psensor{{sensorID}},Isensor{{sensorID}}; 
    {% endfor %}sca_tdf::sca_signal<double> Pmcu, Imcu;
    sca_tdf::sca_signal<double> Prf, Irf;
    sca_tdf::sca_signal<double> Ptotal, Itotal, Ppv, Ipv;


    // instantiate modules
    battery batt("battery");
    cti cti_bus("bus");
    converter_pv conv_pv("converter_pv");
    pv_panel pv_pan("pv_panel");
    converter converter("converter");    
    {% for sensorID in activeSensors %}sensor{{sensorID}} sensor{{sensorID}}("sensor{{sensorID}}"); 
    converter{{sensorID}} converter{{sensorID}}("converter{{sensorID}}"); 
    {% endfor %}mcu mcu("mcu");
    converter_mcu converter_mcu("converter_mcu");
    rf rf("rf");
    converter_rf converter_rf("converter_rf");  


    // connect signals to modules
    batt.I(Ibatt);
    batt.V(Vbatt);
    batt.SOC(SOC);

    converter.in(Ptotal);
    converter.in2(Vbatt);
    converter.out(Ibatt);
    
    pv_pan.P(Ppv);
    
    conv_pv.in(Ppv);
    conv_pv.out(Ipv);
    {% for sensorID in activeSensors %}
    sensor{{sensorID}}.P(Psensor{{sensorID}});

    converter{{sensorID}}.in(Psensor{{sensorID}});
    converter{{sensorID}}.out(Isensor{{sensorID}});
    {% endfor %}
    mcu.P(Pmcu);
    mcu.SOC(SOC);
    
    converter_mcu.in(Pmcu);
    converter_mcu.out(Imcu);
    
    rf.P(Prf);
    rf.SOC(SOC);

    converter_rf.in(Prf);
    converter_rf.out(Irf);

    cti_bus.Imcu(Imcu);
    cti_bus.Irf(Irf);
    cti_bus.Ipv(Ipv);
    cti_bus.Ptotal(Ptotal);{% for sensorID in activeSensors %}
    cti_bus.Isensor{{sensorID}}(Isensor{{sensorID}});{% endfor %}

    // define simulation file
    sca_util::sca_trace_file* atf = sca_util::sca_create_tabular_trace_file("trace.dat");

    // the following signals will be traced. Comment any signal you don't want to trace    
    sca_util::sca_trace( atf, SOC, "SOC" );
    sca_util::sca_trace( atf, Ptotal, "Ptotal" );
    sca_util::sca_trace( atf, Pmcu, "Pmcu" );
    sca_util::sca_trace( atf, Prf, "Prf" );
    sca_util::sca_trace( atf, Ppv, "Ppv" );{% for sensorID in activeSensors %}
    sca_util::sca_trace( atf, Psensor{{sensorID}}, "Psensor{{sensorID}}" );
    sca_util::sca_trace( atf, Isensor{{sensorID}}, "Isensor{{sensorID}}" );{% endfor %}

    cout<<"The simulation starts!"<<endl;

    sc_start(86400,sc_core::SC_SEC); // Set the simulation length

    cout<<"The simulation ends @"<<sc_time_stamp()<<endl;

    sca_util::sca_close_tabular_trace_file( atf );

    return 0;

}